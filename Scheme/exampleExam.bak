#lang racket
(define (accumulate op nv a b f step)
  (if (> a b) nv
      (op (f a) (accumulate op nv (step a) b f step))))

(define (divisible? x y)
  (= 0 (remainder x y)))

(define (id x) x)
(define (++ x) (+ x 1))

(define (divisor-sum x)
  (accumulate + 0 1 (- x 1) id ++))

(define (done? x)
  (= (divisor-sum x) (+ x 2)))

(done? 20) ; → #t
(done? 28) ; → #f

(define (sum-almost-done a b)
  (define (almost-done? x)
    )
  (define (loop sum x)
    (if (>= x b) sum
        (let
            ((dist-a (abs (- x a)))
             (dist-a (abs (- x a))))))))